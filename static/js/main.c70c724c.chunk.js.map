{"version":3,"sources":["components/Header/styles.ts","components/Header/index.tsx","components/AddLocation/styles.ts","components/AddLocation/index.tsx","containers/styles.ts","business/weather.ts","components/WeatherCard/styles.ts","components/WeatherCard/index.tsx","components/WeatherList/index.tsx","containers/Dashboard.tsx","pages/styles.ts","pages/Main.tsx","globalStyles.ts","index.tsx","serviceWorkerRegister.ts"],"names":["StyledHeader","styled","header","StyledTile","h1","Header","StyledInput","input","StyledButton","button","StyledFormn","form","AddLocation","value","onAddLocation","onChange","onRefresh","onSubmit","event","preventDefault","type","target","placeholder","onClick","StyledSection","section","getCurrentWeather","location","callback","axios","get","query","process","then","response","currentWeather","lastUpdated","data","current","last_updated","temperature","temp_c","feelsLike","feelslike_c","humidity","condition","text","icon","name","region","catch","err","console","error","StyledCard","StyledLocation","p","StyledDate","StyledIcon","img","StyledTemperature","StyledCondition","StyledFeelsLike","StyledHumidity","StyledRemoveButton","WeatherCard","onRemove","src","alt","WeatherList","weathers","onRemoveLocation","map","weather","Dashboard","useState","setWeathers","locations","setLocations","refresh","setRefresh","setQuery","useEffect","forEach","filteredWeathers","filter","item","includes","addWeather","Promise","all","results","refreshedWeathers","sort","StyledContent","main","Main","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","onSuccess","registration","log","scope","onFail","window","addEventListener","serviceWorker","register","registerServiceWorker"],"mappings":"iNAEaA,EAAeC,IAAOC,OAAV,4HAOZC,EAAaF,IAAOG,GAAV,wG,OCERC,EARI,kBAClB,cAACL,EAAD,UACC,cAACG,EAAD,yB,eCHWG,EAAcL,IAAOM,MAAV,6HAMXC,EAAeP,IAAOQ,OAAV,kIAQZC,EAAcT,IAAOU,KAAV,yEC0BTC,EAhCuB,SAAC,GAKhC,IAJNC,EAIK,EAJLA,MACAC,EAGK,EAHLA,cACAC,EAEK,EAFLA,SACAC,EACK,EADLA,UAUA,OACC,eAACN,EAAD,CAAaO,SAPsC,SAACC,GACpDA,EAAMC,iBAENL,GAAiBA,EAAcD,IAI/B,UACC,cAACP,EAAD,CACCc,KAAK,cACLL,SAZwD,SAACG,GAAD,OAAWH,GAAYA,EAASG,EAAMG,OAAOR,QAarGS,YAAY,qBACZT,MAAOA,IAER,cAACL,EAAD,CAAcY,KAAK,SAAnB,oBAGA,cAACZ,EAAD,CAAcY,KAAK,SAASG,QAASP,EAArC,8BCjCUQ,EAAgBvB,IAAOwB,QAAV,yD,iBCkCbC,EAAoB,SAACC,EAAkBC,GACnD,OAAOC,IAAMC,KAHaC,EAGSJ,EAHV,UA/BT,gCA+BS,6BAhCXK,kCAgCW,cAA+DD,KAItFE,MAAK,SAACC,GACN,IAAMC,EAAkC,CACvCC,YAAaF,EAASG,KAAKC,QAAQC,aACnCC,YAAaN,EAASG,KAAKC,QAAQG,OACnCC,UAAWR,EAASG,KAAKC,QAAQK,YACjCC,SAAUV,EAASG,KAAKC,QAAQM,SAChCC,UAAWX,EAASG,KAAKC,QAAQO,UAAUC,KAC3CC,KAAMb,EAASG,KAAKC,QAAQO,UAAUE,KACtCpB,SAAS,GAAD,OAAKO,EAASG,KAAKV,SAASqB,KAA5B,aAAqCd,EAASG,KAAKV,SAASsB,SAGrE,OAAIrB,GACHA,EAASO,GACFA,GAEAA,KAGRe,OAAM,SAACC,GAEP,OADAC,QAAQC,MAAM,gBAAiBF,GACxB,QAxBgB,IAACpB,GChCduB,EAAarD,IAAOwB,QAAV,qnBAwBV8B,EAAiBtD,IAAOuD,EAAV,6GAOdC,EAAaxD,IAAOuD,EAAV,2FAMVE,EAAazD,IAAO0D,IAAV,qFAMVC,EAAoB3D,IAAOuD,EAAV,+JASjBK,EAAkB5D,IAAOuD,EAAV,yFAMfM,EAAkB7D,IAAOuD,EAAV,yFAMfO,EAAiB9D,IAAOuD,EAAV,wFAMdQ,EAAqB/D,IAAOQ,OAAV,4UCpChBwD,EAtBuB,SAAC,GAAD,IACrC7B,EADqC,EACrCA,YACAI,EAFqC,EAErCA,YACAE,EAHqC,EAGrCA,UACAE,EAJqC,EAIrCA,SACAC,EALqC,EAKrCA,UACAE,EANqC,EAMrCA,KACApB,EAPqC,EAOrCA,SACAuC,EARqC,EAQrCA,SARqC,OAUrC,eAACZ,EAAD,WACC,cAACC,EAAD,UAAiB5B,IACjB,cAAC8B,EAAD,UAAarB,IACb,cAACsB,EAAD,CAAYS,IAAKpB,EAAMqB,IAAG,yBAAoBvB,KAC9C,eAACe,EAAD,WAAoBpB,EAApB,WACA,cAACqB,EAAD,UAAkBhB,IAClB,eAACiB,EAAD,yBAA6BpB,EAA7B,WACA,eAACqB,EAAD,uBAA0BnB,EAA1B,OACA,cAACoB,EAAD,CAAoB5C,KAAK,SAASG,QAAS,kBAAM2C,GAAYA,EAASvC,IAAtE,wBCFa0C,EArBuB,SAAC,GAAD,IACrCC,EADqC,EACrCA,SACAC,EAFqC,EAErCA,iBAFqC,OAIrC,mCACED,EAASE,KAAI,SAACC,GAAD,OACb,cAAC,EAAD,CAEC5B,UAAW4B,EAAQ5B,UACnBH,UAAW+B,EAAQ/B,UACnBE,SAAU6B,EAAQ7B,SAClBG,KAAM0B,EAAQ1B,KACdX,YAAaqC,EAAQrC,YACrBT,SAAU8C,EAAQ9C,SAClBa,YAAaiC,EAAQjC,YACrB0B,SAAUK,GATX,UACSE,EAAQ9C,SADjB,YAC6B8C,EAAQrC,oBCoDzBsC,EA9DG,WACjB,MAAgCC,mBAA4B,IAA5D,mBAAOL,EAAP,KAAiBM,EAAjB,KACA,EAAkCD,mBAAmB,CAAC,wBAAtD,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA8BH,oBAAkB,GAAhD,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAA0BL,mBAAiB,IAA3C,mBAAO5C,EAAP,KAAckD,EAAd,KAOAC,qBAAU,WACTL,EAAUM,SAAQ,SAACxD,GAAD,OAAcD,EAAkBC,EANhC,SAACA,GAAD,OAAsB,SAACQ,GACzC,IAAMiD,EAAmBd,EAASe,QAAO,SAACC,GAAD,OAAWA,EAAK3D,SAAS4D,SAAS5D,MAC3EiD,EAAY,GAAD,mBAAKQ,GAAL,CAAuBjD,MAI0BqD,CAAW7D,SAErE,CAACkD,IAEJK,qBAAU,WACLH,IACHC,GAAW,GACXS,QAAQC,IAAIb,EAAUL,KAAI,SAAC7C,GAAD,OAAcD,EAAkBC,OACxDM,MAAK,SAAC0D,GACN,IAAMC,EAAuCD,EAC3CN,QAAO,SAACC,GAAD,OAAmB,OAATA,KAEnBV,EAAYgB,SAIb,CAACb,IAkBJ,OACC,eAACvD,EAAD,WACC,cAAC,EAAD,CACCX,MAAOkB,EACPhB,SAAUkE,EACVnE,cArBmB,SAACD,GACjBgE,EAAUU,SAAS1E,IACvBiE,EAAa,GAAD,mBAAKD,GAAL,CAAgBhE,KAE7BoE,EAAS,KAkBPjE,UAVe,WACjBgE,GAAW,MAWV,cAAC,EAAD,CACCV,SAAUA,EAASuB,OACnBtB,iBAnBsB,SAAC5C,GACzBmD,EAAaD,EAAUQ,QAAO,SAAAC,GAAI,OAAK3D,EAAS4D,SAASD,OACzDV,EAAYN,EAASe,QAAO,SAAAC,GAAI,OAAIA,EAAK3D,WAAaA,aC3C3CmE,EAAgB7F,IAAO8F,KAAV,yHCSXC,EAPF,kBACZ,eAACF,EAAD,WACC,cAAC,EAAD,IACA,cAAC,EAAD,QCUaG,GAfKC,YAAH,iTCIjBC,IAASC,OACP,eAAC,IAAMC,WAAP,WACA,cAAC,GAAD,IACE,cAAC,EAAD,OAEFC,SAASC,eAAe,SCVW,WACpC,GAAI,kBAAmBC,UAAW,CACjC,IAAMC,EAAY,SAACC,GAClBtD,QAAQuD,IAAI,qDAAsDD,EAAaE,QAG1EC,EAAS,SAACxD,GACfD,QAAQuD,IAAI,sCAAuCtD,IAGpDyD,OAAOC,iBAAiB,QAAQ,WAC/BP,UAAUQ,cAAcC,SAAS,mCAAoC,CACpEL,MAAO,oBAEN3E,KAAKwE,GACLvD,MAAM2D,WAGTzD,QAAQuD,IAAI,gDDLdO,K","file":"static/js/main.c70c724c.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledHeader = styled.header`\n\tmargin: 0 0 2rem;\n\tpadding: 1rem;\n\twidth: 100%;\n\tbackground-color: rgba(0, 0, 0, 0.7);\n`;\n\nexport const StyledTile = styled.h1`\n\tmargin: 0;\n\tfont-size: 1.8rem;\n\tcolor: white;\n\ttext-align: center;\n`;\n","import { FC } from 'react';\nimport { StyledHeader, StyledTile } from './styles';\n\nconst Header: FC = () => (\n\t<StyledHeader>\n\t\t<StyledTile>\n\t\t\tWeather\n\t\t</StyledTile>\n\t</StyledHeader>\n);\n\nexport default Header;\n","import styled from \"styled-components\";\n\nexport const StyledInput = styled.input`\n\twidth: calc(100% - 4rem - 1rem - 4rem - 1rem);\n\tfont-size: 1.8rem;\n\tpadding: 0.4rem 1rem;\n`;\n\nexport const StyledButton = styled.button`\n\twidth: 4rem;\n\tfont-size: 1.8rem;\n\tpadding: 0.4rem 0;\n\tmargin-left: 1rem;\n\tcursor: pointer;\n`;\n\nexport const StyledFormn = styled.form`\n\tmargin: 0 auto 1rem;\n\tmax-width: 400px;\n`;\n","import { ChangeEventHandler, FC, FormEventHandler } from \"react\";\nimport { StyledButton, StyledFormn, StyledInput } from \"./styles\";\n\nexport interface IAddLocation {\n\tvalue: string;\n\tonAddLocation?: (query: string) => void;\n\tonChange?: (value: string) => void;\n\tonRefresh?: () => void;\n};\n\nconst AddLocation: FC<IAddLocation> = ({\n\tvalue,\n\tonAddLocation,\n\tonChange,\n\tonRefresh,\n}) => {\n\tconst handleChange: ChangeEventHandler<HTMLInputElement> = (event) => onChange && onChange(event.target.value);\n\n\tconst onSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n\t\tevent.preventDefault();\n\n\t\tonAddLocation && onAddLocation(value);\n\t};\n\n\treturn (\n\t\t<StyledFormn onSubmit={onSubmit}>\n\t\t\t<StyledInput\n\t\t\t\ttype=\"AddLocation\"\n\t\t\t\tonChange={handleChange}\n\t\t\t\tplaceholder=\"Add a new location\"\n\t\t\t\tvalue={value}\n\t\t\t/>\n\t\t\t<StyledButton type=\"submit\">\n\t\t\t\t‚ûï\n\t\t\t</StyledButton>\n\t\t\t<StyledButton type=\"button\" onClick={onRefresh}>\n\t\t\t\tüîÅ\n\t\t\t</StyledButton>\n\t\t</StyledFormn>\n\t);\n};\n\nexport default AddLocation;\n","import styled from \"styled-components\";\n\nexport const StyledSection = styled.section`\n\tmargin: 0;\n\tpadding: 0;\n`;\n","import axios from \"axios\";\n\nconst apiKey = process.env.REACT_APP_WEATHER_API_KEY;\nconst BASE_URL = \"https://api.weatherapi.com/v1\";\n\ninterface ICurrentWeatherApiResponde {\n\tdata: {\n\t\tlocation: {\n\t\t\tname: string;\n\t\t\tregion: string;\n\t\t},\n\t\tcurrent: {\n\t\t\tlast_updated: string;\n\t\t\ttemp_c: number;\n\t\t\tfeelslike_c: number;\n\t\t\thumidity: number;\n\t\t\tcondition: {\n\t\t\t\ttext: string;\n\t\t\t\ticon: string;\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport interface ICurrentWeather {\n\tlastUpdated: string;\n\ttemperature: number;\n\tfeelsLike: number;\n\thumidity: number;\n\tcondition: string;\n\ticon: string;\n\tlocation: string;\n};\n\nconst currentWeatherUrl = (query: string) => `${BASE_URL}/current.json?key=${apiKey}&q=${query}`;\n\nexport const getCurrentWeather = (location: string, callback?: (weather: ICurrentWeather) => void): Promise<ICurrentWeather | null> => {\n\treturn axios.get(currentWeatherUrl(location))\n\t\t.then((response: ICurrentWeatherApiResponde) => {\n\t\t\tconst currentWeather: ICurrentWeather = {\n\t\t\t\tlastUpdated: response.data.current.last_updated,\n\t\t\t\ttemperature: response.data.current.temp_c,\n\t\t\t\tfeelsLike: response.data.current.feelslike_c,\n\t\t\t\thumidity: response.data.current.humidity,\n\t\t\t\tcondition: response.data.current.condition.text,\n\t\t\t\ticon: response.data.current.condition.icon,\n\t\t\t\tlocation: `${response.data.location.name}, ${response.data.location.region}`,\n\t\t\t};\n\n\t\t\tif (callback) {\n\t\t\t\tcallback(currentWeather);\n\t\t\t\treturn currentWeather;\n\t\t\t} else {\n\t\t\t\treturn currentWeather;\n\t\t\t}\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.error(\"Fail to fetch\", err);\n\t\t\treturn null;\n\t\t});\n};\n","import styled from \"styled-components\";\n\nexport const StyledCard = styled.section`\n\tbackground-color: white;\n\tmargin: 2rem auto;\n\tpadding: 2rem;\n\tdisplay: grid;\n\tmin-width: 310px;\n\tmax-width: 400px;\n\tgrid-template-columns: max-content max-content 1fr;\n\tgrid-template-rows: repeat(6, auto);\n\tgrid-template-areas:\n\t\t\"location location location\"\n\t\t\"lastUpdated lastUpdated lastUpdated\"\n\t\t\"icon temperature condition\"\n\t\t\"icon temperature feelsLike\"\n\t\t\"icon temperature humidity\"\n\t\t\"removeButton removeButton removeButton\";\n\tgrid-gap: 0.5rem;\n\tbox-shadow: 1px 2px 3px #ccc;\n\n\t@media screen and (min-width: 400px) {\n\t\tborder-radius: 1rem;\n\t}\n`;\n\nexport const StyledLocation = styled.p`\n\tgrid-area: location;\n\tmargin: 0;\n\tfont-size: 1.8rem;\n\tfont-weight: 700;\n`;\n\nexport const StyledDate = styled.p`\n\tgrid-area: lastUpdated;\n\tmargin: 0;\n\tfont-size: 1.6rem;\n`;\n\nexport const StyledIcon = styled.img`\n\tgrid-area: icon;\n\talign-self: center;\n\tmargin: 0;\n`;\n\nexport const StyledTemperature = styled.p`\n\tgrid-area: temperature;\n\tmargin: 0;\n\talign-self: center;\n\tpadding-right: 1rem;\n\tfont-size: 4.6rem;\n\tfont-weight: 700;\n`;\n\nexport const StyledCondition = styled.p`\n\tgrid-area: condition;\n\tmargin: 0;\n\tfont-size: 1.6rem;\n`;\n\nexport const StyledFeelsLike = styled.p`\n\tgrid-area: feelsLike;\n\tmargin: 0;\n\tfont-size: 1.3rem;\n`;\n\nexport const StyledHumidity = styled.p`\n\tgrid-area: humidity;\n\tmargin: 0;\n\tfont-size: 1.3rem;\n`;\n\nexport const StyledRemoveButton = styled.button`\n\tgrid-area: removeButton;\n\tmargin-top: 1rem;\n\tcursor: pointer;\n\twidth: 100%;\n\tfont-size: 1.6rem;\n\tpadding: 0.5rem 0;\n\tborder-radius: 0.5rem;\n\tborder: 1px solid rgba(200, 0, 0, 0.4);\n\tbackground-color: rgba(200, 0, 0, 0.3);\n\t&:hover {\n\t\tbackground-color: rgba(200, 0, 0, 0.4);\n\t}\n`\n","import { FC } from \"react\";\nimport { StyledCard, StyledCondition, StyledDate, StyledFeelsLike, StyledHumidity, StyledIcon, StyledLocation, StyledRemoveButton, StyledTemperature } from \"./styles\";\n\nexport interface IWeatherCard {\n\tlastUpdated: string;\n\ttemperature: number;\n\tfeelsLike: number;\n\thumidity: number;\n\tcondition: string;\n\ticon: string;\n\tlocation: string;\n\tonRemove?: (location: string) => void;\n}\n\nconst WeatherCard: FC<IWeatherCard> = ({\n\tlastUpdated,\n\ttemperature,\n\tfeelsLike,\n\thumidity,\n\tcondition,\n\ticon,\n\tlocation,\n\tonRemove,\n}) => (\n\t<StyledCard>\n\t\t<StyledLocation>{location}</StyledLocation>\n\t\t<StyledDate>{lastUpdated}</StyledDate>\n\t\t<StyledIcon src={icon} alt={`The weather is ${condition}`} />\n\t\t<StyledTemperature>{temperature}¬∫C</StyledTemperature>\n\t\t<StyledCondition>{condition}</StyledCondition>\n\t\t<StyledFeelsLike>Feels like {feelsLike}¬∫C</StyledFeelsLike>\n\t\t<StyledHumidity>Humidity {humidity}%</StyledHumidity>\n\t\t<StyledRemoveButton type=\"button\" onClick={() => onRemove && onRemove(location)}>Remove</StyledRemoveButton>\n\t</StyledCard>\n);\n\nexport default WeatherCard;\n","import { FC } from \"react\";\nimport { ICurrentWeather } from \"../../business/weather\";\nimport WeatherCard from \"../WeatherCard\";\n\nexport interface IWeatherList {\n\tweathers: ICurrentWeather[];\n\tonRemoveLocation?: (location: string) => void;\n};\n\nconst WeatherList: FC<IWeatherList> = ({\n\tweathers,\n\tonRemoveLocation,\n}) => (\n\t<>\n\t\t{weathers.map((weather: ICurrentWeather) => (\n\t\t\t<WeatherCard\n\t\t\t\tkey={`${weather.location}-${weather.lastUpdated}`}\n\t\t\t\tcondition={weather.condition}\n\t\t\t\tfeelsLike={weather.feelsLike}\n\t\t\t\thumidity={weather.humidity}\n\t\t\t\ticon={weather.icon}\n\t\t\t\tlastUpdated={weather.lastUpdated}\n\t\t\t\tlocation={weather.location}\n\t\t\t\ttemperature={weather.temperature}\n\t\t\t\tonRemove={onRemoveLocation}\n\t\t\t/>\n\t\t))}\n\t</>\n);\n\nexport default WeatherList;\n","import { useEffect, useState } from \"react\";\nimport AddLocation from \"../components/AddLocation\";\nimport { StyledSection } from \"./styles\";\nimport { getCurrentWeather, ICurrentWeather } from \"../business/weather\";\nimport WeatherList from \"../components/WeatherList\";\n\nconst Dashboard = () => {\n\tconst [weathers, setWeathers] = useState<ICurrentWeather[]>([]);\n\tconst [locations, setLocations] = useState<string[]>(['Campinas, Sao Paulo']);\n\tconst [refresh, setRefresh] = useState<boolean>(false);\n\tconst [query, setQuery] = useState<string>('');\n\n\tconst addWeather = (location: string) => (currentWeather: ICurrentWeather): void => {\n\t\tconst filteredWeathers = weathers.filter((item) => !item.location.includes(location));\n\t\tsetWeathers([...filteredWeathers, currentWeather]);\n\t};\n\n\tuseEffect(() => {\n\t\tlocations.forEach((location) => getCurrentWeather(location, addWeather(location)));\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [locations]);\n\n\tuseEffect(() => {\n\t\tif (refresh) {\n\t\t\tsetRefresh(false);\n\t\t\tPromise.all(locations.map((location) => getCurrentWeather(location)))\n\t\t\t\t.then((results) => {\n\t\t\t\t\tconst refreshedWeathers: ICurrentWeather[] = results\n\t\t\t\t\t\t.filter((item) => item !== null) as ICurrentWeather[];\n\n\t\t\t\t\tsetWeathers(refreshedWeathers);\n\t\t\t\t});\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [refresh]);\n\n\tconst onAddLocation = (value: string): void => {\n\t\tif (!locations.includes(value)) {\n\t\t\tsetLocations([...locations, value]);\n\t\t}\n\t\tsetQuery('');\n\t};\n\n\tconst onRemoveLocation = (location: string): void => {\n\t\tsetLocations(locations.filter(item => !location.includes(item)));\n\t\tsetWeathers(weathers.filter(item => item.location !== location));\n\t};\n\n\tconst onRefresh = (): void => {\n\t\tsetRefresh(true);\n\t};\n\n\treturn (\n\t\t<StyledSection>\n\t\t\t<AddLocation\n\t\t\t\tvalue={query}\n\t\t\t\tonChange={setQuery}\n\t\t\t\tonAddLocation={onAddLocation}\n\t\t\t\tonRefresh={onRefresh}\n\t\t\t/>\n\t\t\t<WeatherList\n\t\t\t\tweathers={weathers.sort()}\n\t\t\t\tonRemoveLocation={onRemoveLocation}\n\t\t\t/>\n\t\t</StyledSection>\n\t);\n};\n\nexport default Dashboard;\n","import styled from \"styled-components\";\n\nexport const StyledContent = styled.main`\n\tmargin: 0;\n\tpadding: 0;\n\twidth: 100%;\n\theight: 100vh;\n\tbackground-color: #fafafa;\n`;\n","import Header from \"../components/Header\";\nimport Dashboard from \"../containers/Dashboard\";\nimport { StyledContent } from \"./styles\";\n\nconst Main = () => (\n\t<StyledContent>\n\t\t<Header />\n\t\t<Dashboard />\n\t</StyledContent>\n);\n\nexport default Main;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n\t@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,700;1,100;1,700&display=swap');\n\n\t* {\n\t\tbox-sizing: border-box;\n\t}\n\n  html, body {\n    margin: 0;\n\t\tpadding: 0;\n\t\tfont-size: 10px;\n\t\tfont-family: \"Roboto\", sans-serif;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './pages/Main';\nimport GlobalStyle from './globalStyles';\nimport { registerServiceWorker } from './serviceWorkerRegister';\n\nReactDOM.render(\n  <React.StrictMode>\n\t\t<GlobalStyle />\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();\n","\nexport const registerServiceWorker = () => {\n\tif ('serviceWorker' in navigator) {\n\t\tconst onSuccess = (registration: ServiceWorkerRegistration) => {\n\t\t\tconsole.log('ServiceWorker registration successful with scope: ', registration.scope);\n\t\t};\n\t\n\t\tconst onFail = (error: any) => {\n\t\t\tconsole.log('ServiceWorker registration failed: ', error);\n\t\t};\n\t\n\t\twindow.addEventListener('load', () => {\n\t\t\tnavigator.serviceWorker.register('/offline-first/service-worker.js', {\n\t\t\t\tscope: '/offline-first/',\n\t\t\t})\n\t\t\t\t.then(onSuccess)\n\t\t\t\t.catch(onFail);\n\t\t});\n\t} else {\n\t\tconsole.log(\"Your browser does not support service worker\");\n\t}\n};\n"],"sourceRoot":""}